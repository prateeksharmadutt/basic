
AGGRIGATION ASSIGNMENT :-


1)
Main class 


T class 
show() -->show 
show1 print show1 
show2 print show2 
sho3 
show4 
-------------------------------------
class T {
   void show(){
        System.out.println("show");
    }
    void show1(){
        System.out.println("show1");
    }
    void show2(){
        System.out.println("show2");
    }
    void show3(){
        System.out.println("show3");
    }
    void show4(){
        System.out.println("show4");
    }
}
public class Main{
    public static void main(String[] args) {
        T k = new T();
        k.show();
        k.show1();
        k.show3();
        k.show4();
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
2)
Main class 
access 


T class 
five metthod 
->addition 
->multi 
->div 
->modular 
->subs
a)constant 
b)user input 
---------------------------------------------------------
class T {
   void add(){
    int a = 5;
    int b = 5;
    System.out.println("add"+(a+b));
   }
   void multi(){
    int a = 5;
    int b = 5;
    System.out.println("multi"+(a*b));
   }
   void div(){
    int a = 5;
    int b = 5;
    System.out.println("div"+(a/b));
   }
   void mod(){
    int a = 5;
    int b = 5;
    System.out.println("mod"+(a%b));
   }
   void subs(){
    int a = 5;
    int b = 5;
    System.out.println("subs"+(a-b));
   }
    }

public class Main{
    public static void main(String[] args) {
        T k = new T();
        k.add();
        k.div();
        k.mod();
        k.multi();
        k.subs();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
3)
Main class 
access 

T class 
number swap 

E class 
reverse number 

S class 
pallindrome 

A 
armstrong 

F 
factorial 

O 
faibonaccii 

a)constant 
---------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>
class S{
    void pallindrome(){
        int num = 123;
        int rem,sum=0;
        int temp = num;
        while(num>0){
            rem = num%10;
            sum = sum*10+rem;
            num = num/10;
        }
        if(temp==sum){
            System.out.println("pallindrome");
        }
        else{
            System.out.println("not pallindrome");
        }
    }
}
class Rev{
    void reverse(){
        int num = 123;
        int rem,sum=0;
        while(num>0){
            rem = num%10;
            sum = sum*10+rem;
            num = num/10;
        }
        System.out.println(sum);
    }
}
class T{
    void swap(){
    int a = 20;
    int b = 40;
    a=a*b;
    b=a/b;
    a=a/b;
    System.out.println(a);
    System.out.println(b);
    }
}
class A{
    void armstrong(){
            int num = 123;
            int rem,sum=0;
            int temp = num;
            while(num>0){
                rem = num%10;
                sum = sum+rem*rem*rem;
                num = num/10;
            }
            if(temp==sum){
                System.out.println("armstrong");
            }
            else{
                System.out.println("not armstrong");
            }
    }
}
 class O {
    void fibbonachi(){
        int num = 7;
        int n1 = 1;
        int n2 = 1;
        int i=1,temp;
        while(i<=num){
            System.out.println(n1);
            temp = n1+n2;
            n1=n2;
            n2=temp;
            i++;
        }
    }
}
class F{
    void factorial(){
        int n = 5;
        int sum = 1;
        while(n>0){
            sum = sum*n;
            n--;
        }
        System.out.println(sum);
    }
}
public class Main{
    public static void main(String[] args) {
       new T().swap();
       new Rev().reverse();
       new S().pallindrome();
       new A().armstrong();
       new F().factorial();
       new O().fibbonachi();
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
b)user input 
----------------------->>>>>>>>>>>>>>>>>>>>>>>>>
import java.util.Scanner;

class S{
    void pallindrome(){
        Scanner sc = new Scanner(System.in);
        System.out.println("enter any number :");
        int num = sc.nextInt();
        int rem,sum=0;
        int temp = num;
        while(num>0){
            rem = num%10;
            sum = sum*10+rem;
            num = num/10;
        }
        if(temp==sum){
            System.out.println("pallindrome");
        }
        else{
            System.out.println("not pallindrome");
        }
    }
}
import java.util.Scanner;

class Rev{
    void reverse(){
        Scanner sc = new Scanner(System.in);
        System.out.println("enter any number :");
        int num = sc.nextInt();
        int rem,sum=0;
        while(num>0){
            rem = num%10;
            sum = sum*10+rem;
            num = num/10;
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

class T{
    void swap(){
    Scanner sc = new Scanner(System.in);
        System.out.println("enter two number :");
        int a = sc.nextInt();
        int b = sc.nextInt();
    a=a*b;
    b=a/b;
    a=a/b;
    System.out.println(a);
    System.out.println(b);
    }
}
import java.util.Scanner;

class A{
    void armstrong(){
            Scanner sc = new Scanner(System.in);
        System.out.println("enter any number :");
        int num = sc.nextInt();
            int rem,sum=0;
            int temp = num;
            while(num>0){
                rem = num%10;
                sum = sum+rem*rem*rem;
                num = num/10;
            }
            if(temp==sum){
                System.out.println("armstrong");
            }
            else{
                System.out.println("not armstrong");
            }
    }
}
import java.util.Scanner;

class O {
    void fibbonachi(){
        Scanner sc = new Scanner(System.in);
        System.out.println("enter any number :");
        int num= sc.nextInt();
        int n1 = 1;
        int n2 = 1;
        int i=1,temp;
        while(i<=num){
            System.out.println(n1);
            temp = n1+n2;
            n1=n2;
            n2=temp;
            i++;
        }
    }
}
import java.util.Scanner;

class F{
    void factorial(){
        Scanner sc = new Scanner(System.in);
        System.out.println("enter any number :");
        int n = sc.nextInt();
        int sum = 1;
        while(n>0){
            sum = sum*n;
            n--;
        }
        System.out.println(sum);
    }
}

public class Main{
    public static void main(String[] args) {
       new T().swap();
       new Rev().reverse();
       new S().pallindrome();
       new A().armstrong();
       new F().factorial();
       new O().fibbonachi();
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-----------------------------------------------------------------------------------------------------------
4) 
Main class acess 

T class 
single level inheritance 
Car parent 

T class child car acess 
---------------------->>>>>>>>>>>>>>>>>>>>>
class car{
    void show(){
        System.out.println("parent class");
    }
}
class T extends car{
    void show1(){
        System.out.println("child class");
    }
}

public class Main{
    public static void main(String[] args) {
       new T().show1();
       new T().show();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
5) 
Main class : 
access 


T class 
multilevel inheritance 
Car 
Thar 
T 
-------------------->>>>>>>>>>>>>>>>>>>>>>>>>>
class car{
    void show(){
        System.out.println("parent class");
    }
}
class Thar extends car{
    void show1(){
        System.out.println("intermidiate class");
    }
}
class T extends Thar{
    void show2(){
        System.out.println("child class");
    }
}

public class Main{
    public static void main(String[] args) {
       new T().show();
       new T().show1();
       new T().show2();
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
6)
Main class : 
access 

T class 
heirarichal 
Parent 
chil1 
child2 
---------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>
class parent{
    void show(){
        System.out.println("parent class");
    }
}
class T1 extends parent{
    void show1(){
        System.out.println("child 1");
    }
}
class T2 extends parent{
    void show2(){
        System.out.println("child 2");
    }
}

public class Main{
    public static void main(String[] args) {
       new T1().show();
       new T1().show1();
       new T2().show();
       new T2().show2();
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
7)
Main class 


T class 
a)T class k constructor ko overload krna hey 
---------------->>>>>>>>>>>>>>>>>>>>>>>>>
class T{
    T(){
        System.out.println("hii");
    }
    T(int a){
        System.out.println(a);
    }
    T(int a, int b){ 
        System.out.println(a+b);
    }
}

public class Main{
    public static void main(String[] args) {
      new T();
      new T(5);
      new T(4, 5);
    }
}
====================================================================================
b)T class k constructor ki chaining through this 
--------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class T{
    T(){
        System.out.println("hii");
    }
    T(int a){
        this(5, 5);
        System.out.println(a);
    }
    T(int a, int b){ 
        this();
        System.out.println(a+b);
    }
}

public class Main{
    public static void main(String[] args) {
        new T(5);
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
8) 
Main class 
access 

 second class 
parent class B show()
t class k method ka naam bhi samne rkhgene 
overriding 

a)single 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class parent{
    void show(){
        System.out.println("parent class");
    }
}
class T extends parent{
    void show(){
        super.show();
        System.out.println("child class");
    }
}

public class Main{
    public static void main(String[] args) {
        new T().show();
    }
}
//////////////////////////////////////////////////////////////////////
b)multilevel 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class parent{
    void show(){
        System.out.println("parent class");
    }
}
class T1 extends parent{
    void show(){
        super.show();
        System.out.println("child class 1");
    }
}
class T2 extends T1{
    void show(){
        super.show();
        System.out.println("child class 2");
    }
}

public class Main{
    public static void main(String[] args) {
        new T2().show();
    }
}
////////////////////////////////////////////////////////////////////
c)heirarichal 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class parent{
    void show(){
        System.out.println("parent class");
    }
}
class T1 extends parent{
    void show(){
        super.show();
        System.out.println("child class 1");
    }
}
class T2 extends parent{
    void show(){
        super.show();
        System.out.println("child class 2");
    }
}

public class Main{
    public static void main(String[] args) {
        new T1().show();
        new T2().show();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------------------------------------
9)
Main class 

T class 
add() =>paramterised  a+b 
sub() =>paramteriesd
multi() =>paramterised 
div() =>paramterised 
mod() =>paramterised 

a)constant 
---------------------------->
class T{
    void add(int a, int b){
        System.out.println("add :"+(a+b));
    }
    void sub(int a, int b){
        System.out.println("sub :"+(a-b));
    }
    void multi(int a, int b){
        System.out.println("multi :"+(a*b));
    }
    void div(int a, int b){
        System.out.println("div :"+(a/b));
    }
    void mod(int a, int b){
        System.out.println("mod :"+(a%b));
    }
}

public class Main{
    public static void main(String[] args) {
       T k = new T();
       k.add(5, 5);
       k.sub(10, 5);
       k.multi(5, 5);
       k.div(15, 5);
       k.mod(15, 7);
    }
}
............................................................................................
b)user define 
--------------->
class T{
    void add(int a, int b){
        System.out.println("add :"+(a+b));
    }
    void sub(int a, int b){
        System.out.println("sub :"+(a-b));
    }
    void multi(int a, int b){
        System.out.println("multi :"+(a*b));
    }
    void div(int a, int b){
        System.out.println("div :"+(a/b));
    }
    void mod(int a, int b){
        System.out.println("mod :"+(a%b));
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter two number :");
        int a = sc.nextInt();
        int b = sc.nextInt();
       T k = new T();
       k.add(a,b);
       k.sub(a,b);
       k.multi(a,b);
       k.div(a,b);
       k.mod(a,b);
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

10) 
Main class 



T class 
A add() =>paramterised 
B extends A sub() =>paramterised
C extends B div() =>paramterised  
E extends C multi() =>paramterised 
T extends E 
modylar () =>paramterised 



a)constant 
----------------->
class A{
    void add(int a, int b){
        System.out.println("add :"+(a+b));
    }
}
class B extends A{
    void sub(int a, int b){
        System.out.println("sub :"+(a-b));
    }
}
class C extends B{
    void multi(int a, int b){
        System.out.println("multi :"+(a*b));
    }
}
class D extends C{
    void div(int a, int b){
        System.out.println("div :"+(a/b));
    }
}
class T extends D{
    void mod(int a, int b){
        System.out.println("mod :"+(a%b));
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
       T k = new T();
       k.sub(15,3);
       k.multi(15,3);
       k.div(15,3);
       k.mod(15,3);
     //  k.add(15,3);
    }
}
...............................................................................................................
b)user define 
--------------->
class A{
    void add(int a, int b){
        System.out.println("add :"+(a+b));
    }
}
class B extends A{
    void sub(int a, int b){
        System.out.println("sub :"+(a-b));
    }
}
class C extends B{
    void multi(int a, int b){
        System.out.println("multi :"+(a*b));
    }
}
class D extends C{
    void div(int a, int b){
        System.out.println("div :"+(a/b));
    }
}
class T extends D{
    void mod(int a, int b){
        System.out.println("mod :"+(a%b));
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter two number :");
        int a = sc.nextInt();
        int b = sc.nextInt();
       T k = new T();
       k.sub(a,b);
       k.multi(a,b);
       k.div(a,b);
       k.mod(a,b);
       k.add(a,b);
    }
}
---------------------------------------------------
11)
Main class 
access 


T class 
return and no argument 
five metthod 
->addition 
->multi 
->div 
->modular 
->subs
a)constant 
-------------->>>
class T{
    int add(){
        int a = 15;
        int b = 3;
        System.out.println("add :"+(a+b));
        return a+b;
    }
    int sub(){
        int a = 15;
        int b = 3;
        System.out.println("sub :"+(a-b));
        return a-b;
    }
    int multi(){
        int a = 15;
        int b = 3;
        System.out.println("multi :"+(a*b));
        return a*b;
    }
    int div(){
        int a = 15;
        int b = 3;
        System.out.println("div :"+(a/b));
        return a/b;
    }   
    int mod(){
        int a = 15;
        int b = 3;
        System.out.println("mod :"+(a%b));
        return a%b;
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
       T k = new T();
      k.add();
      k.sub();
      k.div();
      k.multi();
      k.mod();
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

b)user input 
----------------->>>>>>>>
import java.util.Scanner;

class T{
    int add(){
        Scanner sc = new Scanner(System.in);
        System.out.println("enter two numbers :");
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println("add :"+(a+b));
        return a+b;
    }
    int sub(){
        Scanner sc = new Scanner(System.in);
        System.out.println("enter two numbers :");
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println("sub :"+(a-b));
        return a-b;
    }
    int multi(){
        Scanner sc = new Scanner(System.in);
        System.out.println("enter two numbers :");
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println("multi :"+(a*b));
        return a*b;
    }
    int div(){
        Scanner sc = new Scanner(System.in);
        System.out.println("enter two numbers :");
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println("div :"+(a/b));
        return a/b;
    }   
    int mod(){
        Scanner sc = new Scanner(System.in);
        System.out.println("enter two numbers :");
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println("mod :"+(a%b));
        return a%b;
    }
}

public class Main{
    public static void main(String[] args) {
       T k = new T();
      k.add();
      k.sub();
      k.div();
      k.multi();
      k.mod();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
12)
Main class 



T class 
return and no argument 
A add() 
B extends A sub() 
C extends B div() 
E extends C multi() 
T extends E 
modular () 

a)constant 
--------------------->>>>>
class A{
    int add(){
        int a = 15;
        int b= 5;
        System.out.println("add :"+(a+b));
        return a+b;
    }
}
class B extends A{
    int sub(){
        int a = 15;
        int b = 5;
        System.out.println("sub :"+(a-b));
        return a-b;
    }
}
class C extends B{
    int multi(){
        int a = 15;
        int b = 5;
        System.out.println("multi :"+(a*b));
        return a*b;
    }
}
class D extends C{
    int div(){
        int a = 15;
        int b = 5;
        System.out.println("div :"+(a/b));
        return a/b;
    }   
}
class T extends D{
    int mod(){
        int a = 15;
        int b = 5;
        System.out.println("mod :"+(a%b));
        return a%b;
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
b)user define 
-------------->>
import java.util.Scanner;

class A{
    int add(){
        Scanner sc = new Scanner(System.in);
        System.out.println("enter two numbers: ");
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println("add :"+(a+b));
        return a+b;
    }
}
class B extends A{
    int sub(){
        Scanner sc = new Scanner(System.in);
         System.out.println("enter two numbers: ");
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println("sub :"+(a-b));
        return a-b;
    }
}
class C extends B{
    int multi(){
        Scanner sc = new Scanner(System.in);
         System.out.println("enter two numbers: ");
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println("multi :"+(a*b));
        return a*b;
    }
}
class D extends C{
    int div(){
        Scanner sc = new Scanner(System.in);
         System.out.println("enter two numbers: ");
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println("div :"+(a/b));
        return a/b;
    }   
}
class T extends D{
    int mod(){
        Scanner sc = new Scanner(System.in);
         System.out.println("enter two numbers: ");
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println("mod :"+(a%b));
        return a%b;
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
       T k = new T();
      k.add();
      k.sub();
      k.div();
      k.multi();
      k.mod();
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
13) 
Main class 
access 


T class 
return and argument 
five metthod 
->addition 
->multi 
->div 
->modular 
->subs
a)constant 
----------------->>>>>>
import java.util.Scanner;

class T{
    int add(int a, int b){
        System.out.println("add :"+(a+b));
        return a+b;
    }
    int sub(int a, int b){
        System.out.println("sub :"+(a-b));
        return a-b;
    }
    int multi(int a, int b){
        System.out.println("multi :"+(a*b));
        return a*b;
    }
    int div(int a, int b){
        System.out.println("div :"+(a/b));
        return a/b;
    }   
    int mod(int a, int b){
        System.out.println("mod :"+(a%b));
        return a%b;
    }
}

public class Main{
    public static void main(String[] args) {
       T k = new T();
      k.add(15,5);
      k.sub(15,5);
      k.div(15,5);
      k.multi(15,5);
      k.mod(15,5);
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

b)user input 
------------------------->>>>>>>>>>>


class T{
    int add(int a, int b){
        System.out.println("add :"+(a+b));
        return a+b;
    }
    int sub(int a, int b){
        System.out.println("sub :"+(a-b));
        return a-b;
    }
    int multi(int a, int b){
        System.out.println("multi :"+(a*b));
        return a*b;
    }
    int div(int a, int b){
        System.out.println("div :"+(a/b));
        return a/b;
    }   
    int mod(int a, int b){
        System.out.println("mod :"+(a%b));
        return a%b;
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
       T k = new T();
       Scanner sc = new Scanner(System.in);
       System.out.println("enter two numbers :");
       int a = sc.nextInt();
       int b = sc.nextInt();
      k.add(a,b);
      k.sub(a,b);
      k.div(a,b);
      k.multi(a,b);
      k.mod(a,b);
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
14)
Main class 



T class 
return and  argument 
A add() 
B extends A sub() 
C extends B div() 
E extends C multi() 
T extends E 
modular () 

a)constant 
--------------------->>
import java.util.Scanner;

class A{
    int add(int a, int b){
        System.out.println("add :"+(a+b));
        return a+b;
    }
}
class B extends A{
    int sub(int a, int b){
        System.out.println("sub :"+(a-b));
        return a-b;
    }
}
class C extends B{
    int multi(int a, int b){
        System.out.println("multi :"+(a*b));
        return a*b;
    }
}
class D extends C{
    int div(int a, int b){
        System.out.println("div :"+(a/b));
        return a/b;
    }   
}
class T extends D{
    int mod(int a, int b){
        System.out.println("mod :"+(a%b));
        return a%b;
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
       T k = new T();
      k.add(15,3);
      k.sub(15,3);
      k.div(15,3);
      k.multi(15,3);
      k.mod(15,3);
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.

b)user define 
-------------->>>>>>

class A{
    int add(int a, int b){
        System.out.println("add :"+(a+b));
        return a+b;
    }
}
class B extends A{
    int sub(int a, int b){
        System.out.println("sub :"+(a-b));
        return a-b;
    }
}
class C extends B{
    int multi(int a, int b){
        System.out.println("multi :"+(a*b));
        return a*b;
    }
}
class D extends C{
    int div(int a, int b){
        System.out.println("div :"+(a/b));
        return a/b;
    }   
}
class T extends D{
    int mod(int a, int b){
        System.out.println("mod :"+(a%b));
        return a%b;
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      System.out.println("enter two numbers :");
      int a = sc.nextInt();
      int b = sc.nextInt();
       T k = new T();
      k.add(a,b);
      k.sub(a,b);
      k.div(a,b);
      k.multi(a,b);
      k.mod(a,b);
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

15) 
Main class 
access 

T class 
getter setter method : single level inheritance 

a)constant 
--------------------------->>>>>>
class Parent{
    int a;
    void setParent(int a){
        this.a=a;
    }
    void getParent(int a){
        return a;
    }
}
class T extends Parent{
    int b;
    void setT(int b){
        this.b=b;
    }
    void getT(int b){
        return b;
    }
    void add(){
        System.out.println(a+b);
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
       T k = new T();
      k.setParent(5);
      k.setT(6);
      k.add();
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
b)user input 
------------------------->>>
class Parent{
    int a;
    void setParent(int a){
        this.a=a;
    }
    void getParent(int a){
        return a;
    }
}
class T extends Parent{
    int b;
    void setT(int b){
        this.b=b;
    }
    void getT(int b){
        return b;
    }
    void add(){
        System.out.println(a+b);
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
       T k = new T();
       Scanner sc = new Scanner(System.in);
       System.out.println("enter two number :");
       int a = sc.nextInt();
       int b = sc.nextInt();
      k.setParent(a);
      k.setT(b);
      k.add();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
16)
Main class 
access 

T class 
getter setter method : mutlilevel inheritance 

a)constant 
----------------->>>>>>>>>>>>>
class Parent{
    int a;
    void setParent(int a){
        this.a=a;
    }
    void getParent(int a){
        return a;
    }
}
class T1 extends Parent{
    int b;
    void setT(int b){
        this.b=b;
    }
    void getT(int b){
        return b;
    }
}
class T2 extends T1{
    int c;
    void setT2(int c){
        this.c=c;
    }
    void getT2(int c){
        return c;
    }
    void add(){
        System.out.println(a+b+b);
    }
}
public class Main{
    public static void main(String[] args) {
       T2 k = new T2();
      k.setParent(5);
      k.setT(5);
      k.setT2(5);
      k.add();
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
b)user input 
------------------------>>>>>>>>>>.

class Parent{
    int a;
    void setParent(int a){
        this.a=a;
    }
    void getParent(int a){
        return a;
    }
}
class T1 extends Parent{
    int b;
    void setT(int b){
        this.b=b;
    }
    void getT(int b){
        return b;
    }
}
class T2 extends T1{
    int c;
    void setT2(int c){
        this.c=c;
    }
    void getT2(int c){
        return c;
    }
    void add(){
        System.out.println(a+b+b);
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
       T2 k = new T2();
       Scanner sc = new Scanner(System.in);
       System.out.println("enter three number :");
       int a = sc.nextInt();
       int b = sc.nextInt();
       int c = sc.nextInt();
      k.setParent(a);
      k.setT(b);
      k.setT2(c);
      k.add();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
17)
Main class 
access 

T class 
getter setter method : heirarichalevel inheritance 

a)constant 
------------------>>
class Parent{
    int a;
    void setParent(int a){
        this.a=a;
    }
    void getParent(int a){
        return a;
    }
}
class T1 extends Parent{
    int b;
    void setT1(int b){
        this.b=b;
    }
    void getT1(int b){
        return b;
    }
    void add1(){
        System.out.println(a+b);
    }
}
class T2 extends Parent{
    int c;
    void setT2(int c){
        this.c=c;
    }
    void getT2(int c){
        return c;
    }
    void add2(){
        System.out.println(a+c);
    }
}


public class Main{
    public static void main(String[] args) {
       T1 k = new T1();
      k.setParent(5);
      k.setT1(5);
      k.add1();
      T2 k2 = new T2();
      k2.setParent(10);
      k2.setT2(5);
      k2.add2();
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
b)user input 
------------->>>>>>
class Parent{
    int a;
    void setParent(int a){
        this.a=a;
    }
    void getParent(int a){
        return a;
    }
}
class T1 extends Parent{
    int b;
    void setT1(int b){
        this.b=b;
    }
    void getT1(int b){
        return b;
    }
    void add1(){
        System.out.println(a+b);
    }
}
class T2 extends Parent{
    int c;
    void setT2(int c){
        this.c=c;
    }
    void getT2(int c){
        return c;
    }
    void add2(){
        System.out.println(a+c);
    }
}
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
      Scanner sc= new Scanner(System.in);
      System.out.println("enter a,b and c");
      int a = sc.nextInt();
      int b = sc.nextInt();
      int c = sc.nextInt();
       T1 k = new T1();
      k.setParent(a);
      k.setT1(b);
      k.add1();
      T2 k2 = new T2();
      k2.setParent(a);
      k2.setT2(c);
      k2.add2();
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
18)
Main class 
access 


T class 
method overload 
--------------------->>>>>>>>>>>
class T{
    void add(int a){
        System.out.println(a);
    }
    void add(int a, int b){
        System.out.println(a+b);
    }
    float add(int a,float b){
        System.out.println(a+b);
        return a+b;
    }
}


public class Main{
    public static void main(String[] args) {
     T k = new T();
     k.add(5, 6);
     k.add(7);
     k.add(5,5.5f);
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

19)
Main class  
access 

A =>four number addition getter settter  
B=>four number sub getter settter  
C=>four number div getter settter  
D=>four number multi getter settter
--------------------------------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>

class A{
    int a,b,c,d;
    void setA(int a, int b, int c,int d){
        this.a=a;
        this.b=b;
        this.c=c;
        this.d=d;
    }
     int getA1(int a){
        return a;
    }
    int getA2(int b){
        return b;
    }
    int getA3(int c){
        return c;
    }
    int getA4(int d){
        return d;
    }
    void add(){
        System.out.println(a+b+c+d);
    }
}
class B{
    int a,b,c,d;
    void setB(int a, int b, int c,int d){
        this.a=a;
        this.b=b;
        this.c=c;
        this.d=d;
    }
     int getB1(int a){
        return a;
    }
    int getB2(int b){
        return b;
    }
    int getB3(int c){
        return c;
    }
    int getB4(int d){
        return d;
    }
    void sub(){
        System.out.println(a-b-c-d);
    }
}
class C{
    int a,b,c,d;
    void setC(int a, int b, int c,int d){
        this.a=a;
        this.b=b;
        this.c=c;
        this.d=d;
    }
     int getC1(int a){
        return a;
    }
    int getC2(int b){
        return b;
    }
    int getC3(int c){
        return c;
    }
    int getC4(int d){
        return d;
    }
    void div(){
        System.out.println(a/b/c/d);
    }
}
class D{
    int a,b,c,d;
    void setD(int a, int b, int c,int d){
        this.a=a;
        this.b=b;
        this.c=c;
        this.d=d;
    }
     int getD1(int a){
        return a;
    }
    int getD2(int b){
        return b;
    }
    int getD3(int c){
        return c;
    }
    int getD4(int d){
        return d;
    }
    void multi(){
        System.out.println(a*b*c*d);
    }
}

public class Main{
    public static void main(String[] args) {
    A k1 = new A();
    k1.setA(1, 1, 1, 1);
    k1.add();
    B k2 = new B();
    k2.setB(15, 7, 3, 1);
    k2.sub();
    C k3 = new C();
    k3.setC(150, 15, 5, 2);
    k3.div();
    D k4 = new D();
    k4.setD(2, 2, 2, 2);
    k4.multi();
    }
}